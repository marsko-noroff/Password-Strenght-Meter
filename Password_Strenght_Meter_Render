
import re
import string
from collections import Counter
from flask import Flask, request, jsonify

app = Flask(__name__)

def password_meter(password, Common_passwords):
    
    #To convert both password and Common_passwords list to lowercase for case-insensetive checking
    password_lower = password.strip().lower()
    Common_passwords_lower = {p.strip().lower() for p in Common_passwords}

    #To check if the password is in the Common_passwords list
    if password_lower in Common_passwords_lower:
        return{
            "score":0,
            "strength": "Very Weak",
            "feedback": ["Your password was found in a common passwords list and is vulnerable to attacks. Choose a unique one."]
        }


    score = 0
    feedback = []

    #Length check
    if len(password) >=12:
        score += 2
    elif len(password) >= 8:
        score += 1
    else:
        feedback.append("Password is too short. Use at least 12 characters")
    
    #Complexity Check
    has_upper = any(c.isupper() for c in password)
    has_lower = any(c.islower() for c in password)
    has_digit = any(c.isdigit() for c in password)
    has_special = any(c in string.punctuation for c in password)

    if has_upper:
        score += 1
    else:
        feedback.append("Add an uppercase letter")

    if has_lower:
        score += 1
    else:
        feedback.append("Add a lowercase letter")
    
    if has_digit:
        score += 1
    else:
        feedback.append("Add a number")
    
    if has_special:
        score += 1
    else:
        feedback.append("Add a special character (@%$!^)")
    
    
    #Character Variety & Repetitions
    char_counts = Counter(password)
    if any(count > len(password) / 2 for count in char_counts.values()):
        feedback.append("Avoid repeated characters too often.")
        score -= 1
    
    if re.search(r"(123|abc|qwerty|password)", password.lower()):
        feedback.append("Avoid common Patterns like '123', 'abc', or 'qwerty'.")
        score -= 1
    
    #final strength score
    if score >= 6:
        strength = "Strong"
    elif score >= 3:
        strength = "Medium"
    else:
        strength = "Weak"
    
    return {"score": score, "strength": strength, "feedback": feedback}

if __name__ == "__main__":
    
    #Load Common_passwords
    try:
        with open('Common_passwords.txt', 'r', encoding="utf-8") as f:
            Common_passwords = f.read().splitlines()
    except FileNotFoundError:
        print("Your password was not found in out database of common passwords")
        Common_passwords = []    

@app.route('/')
def home():
    return "Password Strength Meter API. Send a POST requestr to /check-password with JSON { 'password': 'yourpassword' }"

@app.route('/check-password', methods=['POST'])
def check_password():
    data = request.json
    password = data.get('password', '')
    result = password_meter(password, Common_passwords)
    return jsonify(result)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000)

         
